#!/usr/bin/env python
"""
test_dirt.py

Script de prueba r√°pida para el sistema DIRT.
Demuestra las capacidades del sistema sin necesidad de MongoDB.
"""

import os
import sys

def test_dirt_simple():
    """Test simple del sistema DIRT"""
    print("="*70)
    print("TEST DEL SISTEMA DIRT")
    print("="*70)
    
    # Verificar si existe el modelo
    if not os.path.exists("modelo_inferencias.json"):
        print("\n‚ö† No existe modelo_inferencias.json")
        print("\nGenerando modelo de ejemplo...")
        print("Ejecutando: python dirt_builder.py\n")
        
        import subprocess
        result = subprocess.run([sys.executable, "dirt_builder.py"], 
                              capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"Error al generar modelo: {result.stderr}")
            return
        
        print(result.stdout)
    
    # Importar utils_dirt
    try:
        from utils_dirt import (
            aplicar_DIRT, 
            obtener_estadisticas_modelo, 
            listar_equivalencias_verbo
        )
    except ImportError as e:
        print(f"Error al importar utils_dirt: {e}")
        return
    
    print("\n" + "="*70)
    print("1. ESTAD√çSTICAS DEL MODELO")
    print("="*70)
    
    stats = obtener_estadisticas_modelo()
    if stats:
        print(f"\n  Versi√≥n: {stats['version']}")
        print(f"  Generado: {stats.get('generado', 'N/A')}")
        print(f"  Equivalencias totales: {stats['num_equivalencias']}")
        print(f"  Verbos √∫nicos: {stats['verbos_unicos']}")
        print(f"  Score promedio: {stats['score_promedio']:.3f}")
        print(f"  Score m√°ximo: {stats['score_max']:.3f}")
        print(f"  Score m√≠nimo: {stats['score_min']:.3f}")
    else:
        print("\n  ‚úó No se pudo cargar el modelo")
        return
    
    print("\n" + "="*70)
    print("2. REFORMULACI√ìN DE FRASES")
    print("="*70)
    
    frases_test = [
        "Esta persona fund√≥ una importante instituci√≥n cient√≠fica en Europa",
        "Recibi√≥ m√∫ltiples premios internacionales por su trabajo",
        "Estudi√≥ f√≠sica y qu√≠mica en universidades de renombre",
        "Desarroll√≥ nuevas teor√≠as sobre la composici√≥n de la materia",
        "Trabaj√≥ en colaboraci√≥n con destacados cient√≠ficos de la √©poca",
        "Descubri√≥ elementos qu√≠micos que revolucionaron la ciencia",
        "Cre√≥ t√©cnicas innovadoras para el tratamiento m√©dico",
        "Gan√≥ reconocimiento mundial por sus contribuciones"
    ]
    
    print("\nüìù Frases originales:")
    print("-" * 70)
    for i, frase in enumerate(frases_test, 1):
        print(f"{i}. {frase}")
    
    print("\nüîÑ Aplicando DIRT (probabilidad=0.5, min_score=0.15)...")
    frases_reformuladas = aplicar_DIRT(
        frases_test, 
        probabilidad=0.5, 
        min_score=0.15
    )
    
    print("\n‚ú® Frases reformuladas:")
    print("-" * 70)
    cambios = 0
    for i, (original, reformulada) in enumerate(zip(frases_test, frases_reformuladas), 1):
        marca = "‚úì" if original != reformulada else " "
        if original != reformulada:
            cambios += 1
        print(f"{marca} {i}. {reformulada}")
    
    print(f"\n  Total de frases modificadas: {cambios}/{len(frases_test)}")
    
    print("\n" + "="*70)
    print("3. EQUIVALENCIAS DE VERBOS ESPEC√çFICOS")
    print("="*70)
    
    verbos_test = ["fundar", "recibir", "estudiar", "desarrollar", "trabajar"]
    
    for verbo in verbos_test:
        print(f"\nüìå Equivalencias para '{verbo}':")
        equivalencias = listar_equivalencias_verbo(verbo, top_n=5)
        
        if equivalencias:
            for i, (eq_verbo, score) in enumerate(equivalencias, 1):
                print(f"   {i}. {eq_verbo:15} (score: {score:.3f})")
        else:
            print(f"   - No se encontraron equivalencias")
    
    print("\n" + "="*70)
    print("4. COMPARACI√ìN ANTES/DESPU√âS")
    print("="*70)
    
    print("\nEjemplo de c√≥mo DIRT diversifica el lenguaje:\n")
    
    # Seleccionar solo las frases que cambiaron
    ejemplos_cambios = []
    for original, reformulada in zip(frases_test, frases_reformuladas):
        if original != reformulada:
            ejemplos_cambios.append((original, reformulada))
    
    if ejemplos_cambios:
        for i, (antes, despues) in enumerate(ejemplos_cambios[:3], 1):
            print(f"Ejemplo {i}:")
            print(f"  Antes:   {antes}")
            print(f"  Despu√©s: {despues}")
            print()
    else:
        print("  No se realizaron cambios en esta ejecuci√≥n.")
        print("  (Esto puede ocurrir debido a la probabilidad aleatoria)")
    
    print("="*70)
    print("‚úì TEST COMPLETADO")
    print("="*70)
    
    print("\nüí° Sugerencias:")
    print("  - Ajusta 'probabilidad' para m√°s/menos sustituciones")
    print("  - Ajusta 'min_score' para controlar la calidad de equivalencias")
    print("  - Regenera el modelo con m√°s datos: python dirt_builder.py")
    print()


if __name__ == "__main__":
    try:
        test_dirt_simple()
    except KeyboardInterrupt:
        print("\n\nTest interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚úó Error durante el test: {e}")
        import traceback
        traceback.print_exc()
